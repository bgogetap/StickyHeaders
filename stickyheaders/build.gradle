plugins {
    id "com.jfrog.bintray" version "1.6"
    id "com.github.dcendents.android-maven" version "1.5"
}
apply plugin: 'com.android.library'
apply plugin: 'maven-publish'

repositories {
    mavenCentral()
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

artifacts {
    archives sourcesJar
}

group = PROJECT_GROUP_ID
version = PROJECT_VERSION

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile "com.android.support:appcompat-v7:$supportLibraryVersion"
    compile "com.android.support:recyclerview-v7:$supportLibraryVersion"
    compile "com.android.support:design:$supportLibraryVersion"

    testCompile 'junit:junit:4.12'
    testCompile "org.mockito:mockito-core:$mockitoVersion"
    testCompile 'org.robolectric:robolectric:3.1'
}

bintray {
    Properties properties = new Properties()
    if (file('local.properties').exists()) {
        properties.load(new FileInputStream(file('local.properties')))
    }
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")
    configurations = ['archives']
    pkg {
        repo = 'android'
        name = 'StickyHeaders'
        userOrg = user
        licenses = ['Apache-2.0']
        vcsUrl = PROJECT_VCS_URL
        version {
            name = PROJECT_VERSION
            desc = PROJECT_DESCRIPTION
        }
    }
}

task createPom {
    apply plugin: 'maven'
    description "Generates pom.xml"
    pom {
        project {
            groupId 'com.brandongogetap.stickyheaders'
            artifactId 'stickyheaders'
            version '0.5-PiotrBandurskiEdyszyn'
            packaging 'aar'
        }
    }.withXml {
        def dependenciesNode = asNode().appendNode('dependencies')

        configurations.compile.allDependencies.each { dependency ->
            def dependencyNode = dependenciesNode.appendNode('dependency')
            dependencyNode.appendNode('groupId', dependency.group)
            dependencyNode.appendNode('artifactId', dependency.name)
            dependencyNode.appendNode('version', dependency.version)
        }
    }.writeTo("$buildDir/pom.xml")
}
